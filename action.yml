name: "Test GAP package"
description: "Runs the tests included in the GAP package"
inputs:
  COVERAGE:
    description: "Set to true to gather coverage"
    required: false
    type: boolean
    default: false
  GAP_TESTFILE:
    description: "Name of the GAP file to be read for executing the package tests (overrides TestFile in PackageInfo.g)"
    required: false
    type: string
    default: ""
  GAP_FLAGS:
    description: "Additional flags to pass to the GAP executable"
    required: false
    type: string
    default: ""
  ONLY_NEEDED:
    description: "Only load necessary packages, not suggested ones, prior to testing"
    required: false
    type: boolean
    default: false
  ALL_PACKAGES:
    description: "Load all packages prior to testing"
    required: false
    type: boolean
    default: false
  ERROR_ON_WARNING:
    description: 'Set to true to treat warnings as errors'
    required: false
    type: boolean
    default: false

runs:
  using: "composite"
  steps:
  
    - name: "Run tests"
      shell: bash
      run: |
        set -ex
       
        # Add package to the custom GAP root
        ln -f -s $PWD $GAP_ROOT/pkg/
         
        # Add extra flags
        GAP="gap ${{ inputs.GAP_FLAGS }}"
        
        # Gather coverage
        if [ "${{ inputs.COVERAGE }}" == "true" ]; then
            mkdir -p coverage
            GAP="$GAP --cover coverage/$(mktemp XXXXXX).coverage"
        fi
        
        $GAP <<GAPInput
        
        GAP_TESTFILE := "${{ inputs.GAP_TESTFILE }}";
        
        Read( "PackageInfo.g" );
        info := GAPInfo.PackageInfoCurrent;
        if IsEmpty( GAP_TESTFILE ) or not IsExistingFile( GAP_TESTFILE ) then
            GAP_TESTFILE := info.TestFile;
        fi;
        
        # Load the package with debug info
        SetInfoLevel( InfoPackageLoading, PACKAGE_DEBUG );
        SetPackagePath( info.PackageName, "$GAP_ROOT/pkg/$(basename $PWD)" );

        # Capture the output of loading
        output := "";
        output_stream := OutputTextString( output, true );
        SetPrintFormattingStatus( output_stream, false );
        OutputLogTo( output_stream );
        
        if ${{ inputs.ALL_PACKAGES }} then
            LoadAllPackages();
        elif ${{ inputs.ONLY_NEEDED }} then
            LoadPackage( info.PackageName : OnlyNeeded );
        else
            LoadPackage( info.PackageName );
        fi;

        OutputLogTo();
        CloseStream(output_stream);

        # Treat warnings as errors if specified
        if ${{ inputs.ERROR_ON_WARNING }} then
            if PositionSublist( output, "warning" ) <> fail then
                Error( "Warnings were found when loading the package" );
            fi;
        fi;
        
        SetInfoLevel( InfoPackageLoading, PACKAGE_ERROR );
        
        if EndsWith( GAP_TESTFILE, ".tst" ) then
            QUIT_GAP( Test( GAP_TESTFILE, rec( compareFunction := "uptowhitespace" ) ) );
        else
            Read( GAP_TESTFILE );
            Error( "Package TestFile did not exit gap" );
        fi;
        GAPInput
